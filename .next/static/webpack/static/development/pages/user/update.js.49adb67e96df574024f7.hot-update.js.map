{"version":3,"file":"static/webpack/static/development/pages/user/update.js.49adb67e96df574024f7.hot-update.js","sources":["webpack:///./pages/user/update.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router'\nimport * as actions from '../../store/actions/index';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { checkValidity, updateObject } from '../../shared/utility';\n\nclass Update extends Component {\n  state = {\n    controls: {\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false\n      },\n      password_confirmation: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password Confirmation'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    });\n\n    this.setState({ controls: updatedControls });\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onUpdate(\n      localStorage.getItem('username'),\n      this.state.controls.password.value, \n      this.state.controls.password_confirmation.value\n    )\n      .then(() => {\n        Router.push('/')\n      })\n  }\n\n  render () {\n    const formElementsArray = []\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      })\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={ formElement.id }\n        elementType={ formElement.config.elementType }\n        elementConfig={ formElement.config.elementConfig }\n        value={ formElement.config.value }\n        invalid={ !formElement.config.valid }\n        shouldValidate={ formElement.config.validation }\n        touched={ formElement.config.touched }\n        changed={ (event) => this.inputChangedHandler(event,formElement.id) }\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <CircularProgress />;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = (\n        <p>{ this.props.error }</p>\n      );\n    }\n\n    return (\n      <div>\n        <h1>Update Password</h1>\n\n        { errorMessage }\n        <form onSubmit={ this.submitHandler }>\n          { form }\n          <Button>Submit</Button>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUpdate: (username, password, password_confirmation) => dispatch(actions.update(\n      username,\n      password,\n      password_confirmation\n    ))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Update);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AAGA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAZA;AAdA;AADA;AACA;AA+BA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAtGA;AACA;AAwGA;AACA;AACA;AAAA;AAAA;AADA;AAOA;AACA;AACA;;;;A","sourceRoot":""}