{"version":3,"file":"static/webpack/static/development/pages/auth.js.9a84a2d111ba379e4868.hot-update.js","sources":["webpack:///./pages/auth/index.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport Link from 'next/link'\nimport { connect } from 'react-redux';\nimport ability from '../../services/casl/ability';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { updateObject, checkValidity } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      username: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Username'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    });\n\n    this.setState({ controls: updatedControls });\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.username.value, \n      this.state.controls.password.value\n    );\n  }\n\n  render () {\n\n    const formElementsArray = []\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      })\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={ formElement.id }\n        elementType={ formElement.config.elementType }\n        elementConfig={ formElement.config.elementConfig }\n        value={ formElement.config.value }\n        invalid={ !formElement.config.valid }\n        shouldValidate={ formElement.config.validation }\n        touched={ formElement.config.touched }\n        changed={ (event) => this.inputChangedHandler(event,formElement.id) }\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <CircularProgress />;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = (\n        <p>{ this.props.error }</p>\n      );\n    }\n\n    let abilities = ability.rules.map((rule, index) => (\n        <label key={ index } style={{ display: 'block' }}>\n          rules [{ rule.actions }: { rule.subject }]\n        </label>\n      )\n    );\n\n    return (\n      <div>\n        <h1>Auth</h1>\n\n        <Link href='/index'>\n          <a>Home</a>\n        </Link>\n\n        <Link href={ `/user/show?slug=${ this.props.username }` } as={ `/user/${ this.props.username }` }>\n          <a>My Profile</a>\n        </Link>\n\n        <Link href='/auth/logout' as='/logout'>\n          <a>Logout</a>\n        </Link>\n\n        <div>\n          { errorMessage }\n          <form onSubmit={ this.submitHandler }>\n            { form }\n            <Button>Submit</Button>\n          </form>\n        </div>\n\n        <div>\n          <label style={{ display: 'block' }}>ID: { this.props.userId }</label>\n          <label style={{ display: 'block' }}>Username: { this.props.username }</label>\n          { abilities }\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    userId: state.auth.currentUser.userId,\n    username: state.auth.currentUser.username\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, password) => dispatch(actions.auth(username, password)),\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AAGA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAZA;AAdA;AADA;AACA;AA+BA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;;;;;;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AA9HA;AACA;AAgIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;;;;A","sourceRoot":""}