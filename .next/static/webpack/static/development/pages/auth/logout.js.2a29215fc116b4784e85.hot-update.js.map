{"version":3,"file":"static/webpack/static/development/pages/auth/logout.js.2a29215fc116b4784e85.hot-update.js","sources":["webpack:///./store/actions/auth.js"],"sourcesContent":["import Cookies from 'universal-cookie';\nimport * as actionTypes from './actionTypes';\nimport axios from '../../services/axios/axios-user';\nimport ability from '../../services/casl/ability';\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nexport const authSuccess = (userId, username) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    userId,\n    username\n  };\n};\n\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error\n  };\n};\n\nexport const authLogout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nexport const removeCookie = () => {\n  const cookies = new Cookies();\n\n  cookies.remove('token', { path: '/' });\n  cookies.remove('userId', { path: '/' });\n  cookies.remove('username', { path: '/' });\n  cookies.remove('expirationDate', { path: '/' });\n  cookies.remove('rules', { path: '/' });\n};\n\nexport const setCookie = (token, userId, username, expirationDate, rules) => {\n  const cookies = new Cookies();\n\n  cookies.set('token', token, { path: '/' });\n  cookies.set('userId', userId, { path: '/' });\n  cookies.set('username', username, { path: '/' });\n  cookies.set('expirationDate', new Date().getTime() + expirationDate * 1000, {\n    path: '/'\n  });\n  cookies.set('rules', rules, { path: '/' });\n};\n\nexport const logout = () => dispatch => {\n  const url = '/oauth/revoke';\n  const cookies = new Cookies();\n  const token = cookies.get('token');\n\n  const tokenData = {\n    token\n  }\n  if (token) {\n    axios.post(url, tokenData).then(response => console.log(response)).catch(err => console.log(err));\n  }\n\n  removeCookie();\n  ability.update([]);\n  dispatch(authLogout());\n};\n\nexport const auth = (username, password) => dispatch => {\n  dispatch(authStart());\n\n  const authData = {\n    username,\n    password,\n    grant_type: 'password',\n    client_id: process.env.CLIENT_ID,\n    client_secret: process.env.CLIENT_SECRET\n  };\n\n  const url = '/oauth/token';\n\n  axios\n    .post(url, authData)\n    .then(response => {\n      setCookie(\n        response.data.access_token,\n        response.data.user.userId,\n        response.data.user.username,\n        response.data.expires_in,\n        response.data.user.rules\n      );\n\n      ability.update(response.data.user.rules);\n\n      dispatch(\n        authSuccess(response.data.user.userId, response.data.user.username)\n      );\n    })\n    .catch(err => {\n      dispatch(authFail(err.response.data.errors));\n    });\n};\n\nexport const authCheckState = () => dispatch => {\n  const cookies = new Cookies();\n  const token = cookies.get('token');\n\n  if (!token) {\n    dispatch(logout());\n  } else {\n    const expirationDate = cookies.get('expirationDate');\n\n    if (expirationDate <= new Date().getTime()) {\n      dispatch(logout());\n    } else {\n      const userId = cookies.get('userId');\n      const username = cookies.get('username');\n      ability.update(cookies.get('rules'));\n\n      dispatch(authSuccess(userId, username));\n    }\n  }\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AAGA;AAQA;AAEA;AAGA;AAEA;AACA;AACA;AAjCA;AAmCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAnBA;;;;A","sourceRoot":""}