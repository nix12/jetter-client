{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport * as actionTypes from './actionTypes';\nimport axios from '../../services/axios/defaultAxios';\nexport var registerStart = function registerStart() {\n  return {\n    type: actionTypes.REGISTER_START\n  };\n};\nexport var registerSuccess = function registerSuccess() {\n  return {\n    type: actionTypes.REGISTER_SUCCESS\n  };\n};\nexport var registerFail = function registerFail(error) {\n  return {\n    type: actionTypes.REGISTER_FAIL,\n    error: error\n  };\n};\nexport var register = function register(username, password) {\n  return function (dispatch) {\n    return new _Promise(function (resolve) {\n      dispatch(registerStart());\n      var url = '/api/users';\n      var registerData = {\n        user: {\n          username: username,\n          password: password,\n          password_confirmation: password\n        }\n      };\n      resolve(axios.post(url, registerData).then(function (response) {\n        console.log('SUCCESS');\n        dispatch(registerSuccess());\n      }).catch(function (err) {\n        var errorData = {};\n\n        _Object$entries(err.response.data.errors).forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n\n          /* eslint prefer-destructuring: [\"error\", {VariableDeclarator: {object: true}}] */\n          errorData[key] = value[0];\n        });\n\n        console.log('dispatch error', errorData);\n        dispatch(registerFail(errorData));\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/home/developer/Projects/jetter/client/store/actions/register.js"],"names":["actionTypes","axios","registerStart","type","REGISTER_START","registerSuccess","REGISTER_SUCCESS","registerFail","error","REGISTER_FAIL","register","username","password","dispatch","resolve","url","registerData","user","password_confirmation","post","then","response","console","log","catch","err","errorData","data","errors","forEach","key","value"],"mappings":";;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,mCAAlB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAEH,WAAW,CAACM;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AACrC,SAAO;AACLL,IAAAA,IAAI,EAAEH,WAAW,CAACS,aADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAWC,QAAX;AAAA,SAAwB,UAAAC,QAAQ;AAAA,WAAI,aAAY,UAACC,OAAD,EAAa;AACnFD,MAAAA,QAAQ,CAACX,aAAa,EAAd,CAAR;AAEA,UAAMa,GAAG,GAAG,YAAZ;AAEA,UAAMC,YAAY,GAAG;AACnBC,QAAAA,IAAI,EAAE;AACJN,UAAAA,QAAQ,EAAEA,QADN;AAEJC,UAAAA,QAAQ,EAAEA,QAFN;AAGJM,UAAAA,qBAAqB,EAAEN;AAHnB;AADa,OAArB;AAQAE,MAAAA,OAAO,CACLb,KAAK,CAACkB,IAAN,CAAWJ,GAAX,EAAgBC,YAAhB,EACGI,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAV,QAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACD,OAJH,EAKGmB,KALH,CAKS,UAAAC,GAAG,EAAI;AACZ,YAAMC,SAAS,GAAG,EAAlB;;AAEA,wBAAeD,GAAG,CAACJ,QAAJ,CAAaM,IAAb,CAAkBC,MAAjC,EAAyCC,OAAzC,CAAiD,gBAAkB;AAAA;AAAA,cAAhBC,GAAgB;AAAA,cAAXC,KAAW;;AACjE;AACAL,UAAAA,SAAS,CAACI,GAAD,CAAT,GAAiBC,KAAK,CAAC,CAAD,CAAtB;AACD,SAHD;;AAIAT,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BG,SAA9B;AACAb,QAAAA,QAAQ,CAACN,YAAY,CAACmB,SAAD,CAAb,CAAR;AACD,OAdH,CADK,CAAP;AAiBD,KA9B2D,CAAJ;AAAA,GAAhC;AAAA,CAAjB","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from '../../services/axios/defaultAxios';\n\nexport const registerStart = () => {\n  return {\n    type: actionTypes.REGISTER_START,\n  }\n}\n\nexport const registerSuccess = () => {\n  return {\n    type: actionTypes.REGISTER_SUCCESS,\n  }\n}\n\nexport const registerFail = (error) => {\n  return {\n    type: actionTypes.REGISTER_FAIL,\n    error: error,\n  }\n}\n\nexport const register = (username, password) => dispatch => new Promise((resolve) => {\n  dispatch(registerStart());\n\n  const url = '/api/users';\n\n  const registerData = { \n    user: {\n      username: username,\n      password: password,\n      password_confirmation: password,\n    }\n  }\n\n  resolve(\n    axios.post(url, registerData)\n      .then(response => {\n        console.log('SUCCESS');\n        dispatch(registerSuccess());\n      })\n      .catch(err => {        \n        const errorData = {};\n        \n        Object.entries(err.response.data.errors).forEach(([key, value]) => {\n          /* eslint prefer-destructuring: [\"error\", {VariableDeclarator: {object: true}}] */\n          errorData[key] = value[0];\n        });\n        console.log('dispatch error', errorData)\n        dispatch(registerFail(errorData));\n      })\n  )\n})\n"]},"metadata":{},"sourceType":"module"}