{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/developer/Projects/jetter/client/pages/user/update.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport axios from '../../services/axios/axios-user';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\n\nvar Update =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Update, _Component);\n\n  function Update() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Update);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Update)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      controls: {\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        password_confirmation: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password Confirmation'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"inputChangedHandler\", function (event, controlName) {\n      var updatedControls = updateObject(_this.state.controls, _defineProperty({}, controlName, updateObject(_this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, _this.state.controls[controlName].validation),\n        touched: true\n      })));\n\n      _this.setState({\n        controls: updatedControls\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submitHandler\", function (event) {\n      event.preventDefault();\n\n      _this.props.onUpdate(localStorage.getItem('username'), _this.state.controls.password.value, _this.state.controls.password_confirmation.value).then(function () {\n        Router.push('/');\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Update, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        });\n      });\n\n      if (this.props.loading) {\n        form = React.createElement(CircularProgress, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        });\n      }\n\n      var errorMessage = null;\n\n      if (this.props.error) {\n        errorMessage = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, this.props.error);\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Update Password\"), errorMessage, React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, form, React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Update;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onUpdate: function onUpdate(userId, password, password_confirmation) {\n      return dispatch(actions.update(userId, password, password_confirmation));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Update);","map":{"version":3,"sources":["/home/developer/Projects/jetter/client/pages/user/update.jsx"],"names":["React","Component","connect","Router","axios","Input","Button","CircularProgress","checkValidity","updateObject","actions","Update","controls","password","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","password_confirmation","minLength","event","controlName","updatedControls","state","target","setState","preventDefault","props","onUpdate","localStorage","getItem","then","push","formElementsArray","key","id","config","form","map","formElement","inputChangedHandler","loading","errorMessage","error","submitHandler","mapDispatchToProps","dispatch","userId","update"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router'\nimport axios from '../../services/axios/axios-user';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\n\nclass Update extends Component {\n  state = {\n    controls: {\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false\n      },\n      password_confirmation: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password Confirmation'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    });\n\n    this.setState({ controls: updatedControls });\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onUpdate(\n      localStorage.getItem('username'),\n      this.state.controls.password.value, \n      this.state.controls.password_confirmation.value\n    )\n      .then(() => {\n        Router.push('/')\n      })\n  }\n\n  render () {\n    const formElementsArray = []\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      })\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={ formElement.id }\n        elementType={ formElement.config.elementType }\n        elementConfig={ formElement.config.elementConfig }\n        value={ formElement.config.value }\n        invalid={ !formElement.config.valid }\n        shouldValidate={ formElement.config.validation }\n        touched={ formElement.config.touched }\n        changed={ (event) => this.inputChangedHandler(event,formElement.id) }\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <CircularProgress />;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = (\n        <p>{ this.props.error }</p>\n      );\n    }\n\n    return (\n      <div>\n        <h1>Update Password</h1>\n\n        { errorMessage }\n        <form onSubmit={ this.submitHandler }>\n          { form }\n          <Button>Submit</Button>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUpdate: (userId, password, password_confirmation) => dispatch(actions.update(\n      userId,\n      password,\n      password_confirmation\n    ))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Update);"]},"metadata":{},"sourceType":"module"}