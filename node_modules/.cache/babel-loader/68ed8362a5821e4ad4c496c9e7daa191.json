{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport * as actionTypes from './actionTypes';\nimport axios from '../../services/axios/defaultAxios';\nexport var registerStart = function registerStart() {\n  return {\n    type: actionTypes.REGISTER_START\n  };\n};\nexport var registerSuccess = function registerSuccess() {\n  return {\n    type: actionTypes.REGISTER_SUCCESS\n  };\n};\nexport var registerFail = function registerFail(error) {\n  return {\n    type: actionTypes.REGISTER_FAIL,\n    error: error\n  };\n};\nexport var register = function register(username, password) {\n  return function (dispatch) {\n    dispatch(registerStart());\n    var url = '/api/users';\n    var registerData = {\n      user: {\n        username: username,\n        password: password,\n        password_confirmation: password\n      }\n    };\n    axios.post(url, registerData).then(function (response) {\n      dispatch(registerSuccess());\n    }).catch(function (err) {\n      console.log('register error', err.response);\n      var errorData = [];\n\n      _Object$values(err.response.data.errors).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        /* eslint prefer-destructuring: [\"error\", {VariableDeclarator: {object: true}}] */\n        errorData[key] = value[0];\n      });\n\n      dispatch(registerFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/home/developer/Projects/jetter/client/store/actions/register.js"],"names":["actionTypes","axios","registerStart","type","REGISTER_START","registerSuccess","REGISTER_SUCCESS","registerFail","error","REGISTER_FAIL","register","username","password","dispatch","url","registerData","user","password_confirmation","post","then","response","catch","err","console","log","errorData","data","errors","forEach","key","value"],"mappings":";;AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,mCAAlB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAEH,WAAW,CAACM;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AACrC,SAAO;AACLL,IAAAA,IAAI,EAAEH,WAAW,CAACS,aADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9C,SAAO,UAAAC,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAACX,aAAa,EAAd,CAAR;AAEA,QAAMY,GAAG,GAAG,YAAZ;AAEA,QAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AACJL,QAAAA,QAAQ,EAAEA,QADN;AAEJC,QAAAA,QAAQ,EAAEA,QAFN;AAGJK,QAAAA,qBAAqB,EAAEL;AAHnB;AADa,KAArB;AAQAX,IAAAA,KAAK,CAACiB,IAAN,CAAWJ,GAAX,EAAgBC,YAAhB,EACGI,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChBP,MAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACD,KAHH,EAIGgB,KAJH,CAIS,UAAAC,GAAG,EAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,GAAG,CAACF,QAAlC;AAEA,UAAMK,SAAS,GAAG,EAAlB;;AAEA,qBAAcH,GAAG,CAACF,QAAJ,CAAaM,IAAb,CAAkBC,MAAhC,EAAwCC,OAAxC,CAAgD,gBAAkB;AAAA;AAAA,YAAhBC,GAAgB;AAAA,YAAXC,KAAW;;AAChE;AACAL,QAAAA,SAAS,CAACI,GAAD,CAAT,GAAiBC,KAAK,CAAC,CAAD,CAAtB;AACD,OAHD;;AAKAjB,MAAAA,QAAQ,CAACN,YAAY,CAACe,GAAD,CAAb,CAAR;AACD,KAfH;AAgBD,GA7BD;AA8BD,CA/BM","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from '../../services/axios/defaultAxios';\n\nexport const registerStart = () => {\n  return {\n    type: actionTypes.REGISTER_START,\n  }\n}\n\nexport const registerSuccess = () => {\n  return {\n    type: actionTypes.REGISTER_SUCCESS,\n  }\n}\n\nexport const registerFail = (error) => {\n  return {\n    type: actionTypes.REGISTER_FAIL,\n    error: error,\n  }\n}\n\nexport const register = (username, password) => {\n  return dispatch => {\n    dispatch(registerStart());\n\n    const url = '/api/users';\n\n    const registerData = { \n      user: {\n        username: username,\n        password: password,\n        password_confirmation: password,\n      }\n    }\n\n    axios.post(url, registerData)\n      .then(response => {\n        dispatch(registerSuccess());\n      })\n      .catch(err => {\n        console.log('register error', err.response)\n        \n        const errorData = [];\n        \n        Object.values(err.response.data.errors).forEach(([key, value]) => {\n          /* eslint prefer-destructuring: [\"error\", {VariableDeclarator: {object: true}}] */\n          errorData[key] = value[0];\n        });\n        \n        dispatch(registerFail(err));\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}