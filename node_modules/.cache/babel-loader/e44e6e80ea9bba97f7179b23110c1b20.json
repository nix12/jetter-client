{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport ability from '../../shared/ability';\nexport var authStart = function authStart() {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport var authSuccess = function authSuccess(userId, username) {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    userId: userId,\n    username: username\n  };\n};\nexport var authFail = function authFail(error) {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport var logout = function logout() {\n  sessionStorage.removeItem('token');\n  localStorage.removeItem('username');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport var auth = function auth(username, password) {\n  return function (dispatch) {\n    dispatch(authStart());\n    var authData = {\n      username: username,\n      password: password,\n      grant_type: 'password',\n      // client_id: process.env.CLIENT_ID,\n      // client_secret: process.env.CLIENT_SECRET,\n      alg: 'HS512',\n      typ: 'JWT',\n      iss: 'pZsuRHGtNIdE1Qffk2P8CI2MQtWKXiz9'\n    };\n    var url = 'http://localhost:8000/oauth/token';\n    axios.post(url, authData).then(function (response) {\n      sessionStorage.setItem('token', response.data.access_token);\n      localStorage.setItem('username', response.data.username);\n      localStorage.setItem('userId', response.data.userId);\n      console.log(response);\n      ability.update(response.data.rules);\n      dispatch(authSuccess(response.data.userId, response.data.username));\n    }).catch(function (err) {\n      dispatch(authFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/home/developer/Projects/jetter/client/store/actions/auth.js"],"names":["actionTypes","axios","ability","authStart","type","AUTH_START","authSuccess","userId","username","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","sessionStorage","removeItem","localStorage","AUTH_LOGOUT","auth","password","dispatch","authData","grant_type","alg","typ","iss","url","post","then","response","setItem","data","access_token","console","log","update","rules","catch","err"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEJ,WAAW,CAACK;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAASC,QAAT,EAAsB;AAC/C,SAAO;AACLJ,IAAAA,IAAI,EAAEJ,WAAW,CAACS,YADb;AAELF,IAAAA,MAAM,EAAEA,MAFH;AAGLC,IAAAA,QAAQ,EAAEA;AAHL,GAAP;AAKD,CANM;AAQP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AACjC,SAAO;AACLP,IAAAA,IAAI,EAAEJ,WAAW,CAACY,SADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,IAAME,MAAM,GAAG,SAATA,MAAS,GAAM;AAC1BC,EAAAA,cAAc,CAACC,UAAf,CAA0B,OAA1B;AACAC,EAAAA,YAAY,CAACD,UAAb,CAAwB,UAAxB;AACAC,EAAAA,YAAY,CAACD,UAAb,CAAwB,QAAxB;AAEA,SAAO;AACLX,IAAAA,IAAI,EAAEJ,WAAW,CAACiB;AADb,GAAP;AAGD,CARM;AAUP,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACV,QAAD,EAAWW,QAAX,EAAwB;AAC1C,SAAO,UAAAC,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAACjB,SAAS,EAAV,CAAR;AAEA,QAAMkB,QAAQ,GAAG;AACfb,MAAAA,QAAQ,EAAEA,QADK;AAEfW,MAAAA,QAAQ,EAAEA,QAFK;AAGfG,MAAAA,UAAU,EAAE,UAHG;AAIf;AACA;AACAC,MAAAA,GAAG,EAAE,OANU;AAOfC,MAAAA,GAAG,EAAE,KAPU;AAQfC,MAAAA,GAAG,EAAE;AARU,KAAjB;AAWA,QAAIC,GAAG,GAAG,mCAAV;AAEAzB,IAAAA,KAAK,CAAC0B,IAAN,CAAWD,GAAX,EAAgBL,QAAhB,EACGO,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChBf,MAAAA,cAAc,CAACgB,OAAf,CAAuB,OAAvB,EAAgCD,QAAQ,CAACE,IAAT,CAAcC,YAA9C;AACAhB,MAAAA,YAAY,CAACc,OAAb,CAAqB,UAArB,EAAiCD,QAAQ,CAACE,IAAT,CAAcvB,QAA/C;AACAQ,MAAAA,YAAY,CAACc,OAAb,CAAqB,QAArB,EAA+BD,QAAQ,CAACE,IAAT,CAAcxB,MAA7C;AACA0B,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA3B,MAAAA,OAAO,CAACiC,MAAR,CAAeN,QAAQ,CAACE,IAAT,CAAcK,KAA7B;AACAhB,MAAAA,QAAQ,CAACd,WAAW,CAACuB,QAAQ,CAACE,IAAT,CAAcxB,MAAf,EAAuBsB,QAAQ,CAACE,IAAT,CAAcvB,QAArC,CAAZ,CAAR;AACD,KARH,EASG6B,KATH,CASS,UAAAC,GAAG,EAAI;AACZlB,MAAAA,QAAQ,CAACV,QAAQ,CAAC4B,GAAD,CAAT,CAAR;AACD,KAXH;AAYD,GA5BD;AA6BD,CA9BM","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport ability from '../../shared/ability';\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  }\n}\n\nexport const authSuccess = (userId, username) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    userId: userId,\n    username: username,\n  }\n}\n\nexport const authFail = (error) => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  }\n}\n\nexport const logout = () => {\n  sessionStorage.removeItem('token');\n  localStorage.removeItem('username');\n  localStorage.removeItem('userId');\n\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  }\n}\n\nexport const auth = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n\n    const authData = {\n      username: username,\n      password: password,\n      grant_type: 'password',\n      // client_id: process.env.CLIENT_ID,\n      // client_secret: process.env.CLIENT_SECRET,\n      alg: 'HS512',\n      typ: 'JWT',\n      iss: 'pZsuRHGtNIdE1Qffk2P8CI2MQtWKXiz9',\n    };\n\n    let url = 'http://localhost:8000/oauth/token';\n\n    axios.post(url, authData)\n      .then(response => {\n        sessionStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('username', response.data.username);\n        localStorage.setItem('userId', response.data.userId);\n        console.log(response)\n        ability.update(response.data.rules);\n        dispatch(authSuccess(response.data.userId, response.data.username));\n      })\n      .catch(err => {\n        dispatch(authFail(err));\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}