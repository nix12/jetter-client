{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/developer/Projects/jetter/client/pages/user/new.jsx\";\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport { connect } from 'react-redux';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nvar New =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(New, _Component);\n\n  function New() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, New);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(New)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      controls: {\n        username: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Username'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        password_confirmation: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password Confirmation'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"inputChangedHandler\", function (event, controlName) {\n      var updatedControls = updateObject(_this.state.controls, _defineProperty({}, controlName, updateObject(_this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, _this.state.controls[controlName].validation),\n        touched: true\n      })));\n\n      _this.setState({\n        controls: updatedControls\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submitHandler\", function (event) {\n      event.preventDefault();\n      var onRegister = _this.props.onRegister;\n      onRegister(_this.state.controls.username.value, _this.state.controls.password.value, _this.state.controls.password_confirmation.value).then(function (response) {\n        if (_this.props.error) {\n          Router.push('/index');\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"redirect\", function () {\n      console.log('error', _this.props.error);\n    });\n\n    return _this;\n  }\n\n  _createClass(New, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        });\n      });\n      var errorMessage = null;\n\n      if (this.props.error) {\n        errorMessage = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, console.log('errorMessage', this.props.error));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Sign Up\"), React.createElement(Link, {\n        href: \"/index\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Home\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, errorMessage, React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, form, React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return New;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    error: state.register.error\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onRegister: function onRegister(username, password, password_confirmation) {\n      return dispatch(actions.register(username, password, password_confirmation));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(New);","map":{"version":3,"sources":["/home/developer/Projects/jetter/client/pages/user/new.jsx"],"names":["React","Component","Link","Router","connect","Input","Button","actions","updateObject","checkValidity","New","controls","username","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","password","minLength","password_confirmation","event","controlName","updatedControls","state","target","setState","preventDefault","onRegister","props","then","response","error","push","console","log","formElementsArray","key","id","config","form","map","formElement","inputChangedHandler","errorMessage","submitHandler","mapStateToProps","register","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Link from 'next/link'\nimport Router from 'next/router';\nimport { connect } from 'react-redux';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass New extends Component {\n  state = {\n    controls: {\n      username: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Username'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      },\n      password_confirmation: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password Confirmation'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    });\n\n    this.setState({ controls: updatedControls });\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    const { onRegister } = this.props;\n    onRegister(\n      this.state.controls.username.value,\n      this.state.controls.password.value,\n      this.state.controls.password_confirmation.value,\n    )\n      .then(response => {\n        if (this.props.error) {\n          Router.push('/index');\n        }\n      })\n  }\n\n  redirect = () => {\n    console.log('error', this.props.error);\n    \n  }\n\n  render () {\n    const formElementsArray = []\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      })\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={ formElement.id }\n        elementType={ formElement.config.elementType }\n        elementConfig={ formElement.config.elementConfig }\n        value={ formElement.config.value }\n        invalid={ !formElement.config.valid }\n        shouldValidate={ formElement.config.validation }\n        touched={ formElement.config.touched }\n        changed={ (event) => this.inputChangedHandler(event,formElement.id) }\n      />\n    ));\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = (\n        <p>{ console.log('errorMessage', this.props.error) }</p>\n      )\n    }\n\n    return (\n      <div>\n        <h1>Sign Up</h1>\n\n        <Link href='/index'>\n          <a>Home</a>\n        </Link>\n\n        <div>\n          { errorMessage }\n          <form onSubmit={ this.submitHandler }>\n            { form }\n            <Button>Submit</Button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    error: state.register.error,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onRegister: (username, password, password_confirmation) => dispatch(actions.register(\n      username, \n      password, \n      password_confirmation\n    )),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(New);"]},"metadata":{},"sourceType":"module"}